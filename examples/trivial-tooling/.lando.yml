# Tooling example
name: trivial-tooling
compose:
  - compose.yml

# This section defines our tooling routes
tooling:

  # Define `lando php` as a command that runs `php @` against
  # the appserver service. Note that @ will be any additional arguments you pass
  # into `lando php`
  #
  # Example: typing `lando php install` will run `php install`
  # inside the container.
  php:

    # Run the `lando php` command against the php service from the compose file
    service: php

    # Give a nice description to describe what this does.
    # If ommited this will default to "Run COMMAND commands" where COMMAND is
    # php in this case
    description: Run php commands

    # Define a specific command to start with inside the container. If ommited
    # this will default to the name you give the service eg php.
    #
    # This can be a string or an array if you want to run multiple commands
    # See "test" below for a multi-command example
    cmd: php

  # Define `lando whoami` as a command that runs `id` against the php service w
  whoami:
    service: php
    cmd: id

    # Run this command as root inside of the container. If ommitted this
    # will default to the LANDO_WEBROOT_USER envvar for the service and then root
    # if undefiend. You can also pass in user:group.
    #
    # Note that the user needs to already exist inside of the container
    user: root

  true:
    service: web
    description: Drop into a MySQL shell
    user: root
    cmd: echo "this is true"

  # Define a tooling command with a stringed command
  test:
    # Run multiple commands on the same service
    service: php
    cmd:
      - php -v
      - php test3
    description: Run all the tests

  # Define `lando word` that passes through to a script that can handle options.
  # The script is mounted into our appserver in the service overrides above
  #
  # This script doesnt really do anything it's just to demonstrate options declaration
  # for the lando cli eg if you run `lando word -- --help` you should see some
  # options.
  #
  # Note that you can also specify options for the commands above as well but
  # generally it makes more sense to just delegate to the options of the command
  # you are invoking itself
  #
  # Note that options get passed into commands no matter what and AS IS. They do
  # not need to be defined explicitly here. This is purely to provide helpers
  # when running `lando CMD -- --help` or to get interactive prompts. As an
  # example try running `lando word -w bird --surprise`. `--surprise` is not defined below but
  # has a handler in our word.sh.
  word:
    service: web
    cmd: /app/word.sh
    options:
      word:
        # If you are specifying interactive options, as is the case here,
        # you will want to set passthrough to true so that interactive answers
        # get translated into command line args for the script to handle
        passthrough: true
        alias:
          - w
        describe: Print what the word is
        interactive:
          type: input
          message: What is the word?
          default: bird
          weight: 600

  # Define `lando dynamic` so that it can run on different services based on
  # the `--service` flag instead of a hardcoded option
  #
  # This is useful for complex commands that can act on multiple services eg
  # a database-import, or drush status check, or pull from a hosting provider
  # like pantheon
  dynamic:

    # Just print the hostname so we know what service we are on
    cmd: env

    # The format :NAME will use the service specified by the NAME flag
    # You likely will want to specify the option below and set a reasonable
    # default
    service: :service

    # Specify a service option to handle the above
    options:
      service:
        default: web
        alias:
          - s
        describe: Run a different service

  # Define `lando env` so that it can run on different services on the command
  # values
  #
  # This is useful for complex build steps that need to run on multiple containers,
  # note that the usual "service" key will only be used as the fallback value for the
  # service with the key of the command taken precendent.
  env:

    # Run our two build steps
    cmd:
      - 'things'
      - php: echo "HERE IS THE PHP ENVIRONMENT"
      - php: echo ""
      - php: env
      - web: echo "\\nHERE IS THE WEB ENVIRONMENT\\n"
      - web: env

    description: Print environment variables for a few things

  vim:
    service: web2
